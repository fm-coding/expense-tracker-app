version: '3.9'

services:
  postgres:
    image: postgres:15-alpine
    container_name: pm-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 4422
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build: ./auth-service
    container_name: pm-auth-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: pm_auth_db
      DB_USERNAME: postgres
      DB_PASSWORD: 4422
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      JWT_SECRET: MyVerySecureSecretKeyThatIsAtLeast64CharactersLongForHS512AlgorithmSecurity123456789
      FRONTEND_URL: http://localhost:3000
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8084
    ports:
      - "8084:8084"
    networks:
      - pm-network

  expense-service:
    build: ./expense-service
    container_name: pm-expense-service
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      auth-service:
        condition: service_started
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: pm_expense_db
      DB_USERNAME: postgres
      DB_PASSWORD: 4422
      JWT_SECRET: MyVerySecureSecretKeyThatIsAtLeast64CharactersLongForHS512AlgorithmSecurity123456789
      AUTH_SERVICE_URL: http://auth-service:8084
      SPRING_PROFILES_ACTIVE: docker
      SERVER_PORT: 8083
    ports:
      - "8083:8083"
    networks:
      - pm-network

networks:
  pm-network:
    driver: bridge

volumes:
  postgres_data: